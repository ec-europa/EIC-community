<?php

define('WS_EVENTSITE_ENDPOINT', 'easme_events/rest');

/**
 * @file
 * Code for the Web Services feature.
 */

include_once 'c4m_web_services_events.features.inc';

/**
 * Implements hook_services_authentication_info().
 */
function c4m_web_services_events_services_authentication_info() {
  return [
    'title' => t('C4M - Request-specific token authorisation'),
    'description' => t('Request-specific token is sent in each request.'),
    'authenticate_call' => '_c4m_web_services_events_authenticate_call',
    'security_settings' => '_c4m_web_services_events_security_settings',
    'default_security_settings' => '_c4m_web_services_events_default_security_settings',
  ];
}

/**
 * Implements hook_perm().
 */
function c4m_web_services_events_permission() {
  return array(
    'administer webservice event sites' => array(
      'title' => t('Administer webservice event sites'),
      'description' => t('Administer webservice event sites settings.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function c4m_web_services_events_menu() {
  $items = array();

  $items['admin/config/services/events_site'] = array(
    'title' => 'Events site Webservice settings',
    'description' => 'manage the settings for the Events site Webservice.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webservices_eventsite_admin_settings_general'),
    'access arguments' => array('administer webservice event sites'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/eventsite.admin.inc',
  );
  return $items;
}

/**
 * Authorises a call using request-specific token to verify the request.
 *
 * @param array $settings
 *   The settings for the authorisation module.
 * @param array $method
 *   The method that's being called.
 * @param array $args
 *   The arguments that are being used to call the method.
 *
 * @return null|string
 *   Returns nothing, or a error message if authorisation fails.
 *
 * @see c4m_web_services_events_services_authentication_info()
 */
function _c4m_web_services_events_authenticate_call(array $settings, array $method, array $args) {

  $endpoint_path = services_get_server_info('endpoint_path', '');
  $context = new ServicesContext($endpoint_path);
  $context->buildFromGlobals();

  $valid_token = FALSE;
  // Check if the header contains the authorization token.
  if (NULL !== $context->getServerVariable("HTTP_" . strtoupper($settings["authorization_token_name"]))) {
    if ($context->getServerVariable("HTTP_" . strtoupper($settings["authorization_token_name"])) === $settings["authorization_token_key"]) {
      $valid_token = TRUE;
    }
  }
  else {
    // Get the original request body.
    $arguments = _c4m_web_services_events_array_flatten($args);
    foreach ($arguments as $key => $one) {
      if ($key == $settings["authorization_token_name"] && $one == $settings["authorization_token_key"]) {
        $valid_token = TRUE;
        break;
      }
    }
  }
  if (!$valid_token) {
    return t('Invalid token value.');
  }

  // Open session for Admin user to edit/create content.
  global $user;
  drupal_save_session(FALSE);
  $user = user_load_by_name('dashboard_user');
  if (empty($user)) {
    return t('Dashboard user not available, contact site administrator.');
  }
}

/**
 * Returns an associative array of Form API elements for a settings form.
 *
 * @see c4m_web_services_events_services_authentication_info()
 */
function _c4m_web_services_events_default_security_settings() {
  return [
    'authorization_token_name' => 'AuthorizationToken',
    'authorization_token_key' => variable_get('c4m_web_services_events_authorization_token_key', ''),
  ];
}

/**
 * Returns an array with the default settings for the auth module.
 *
 * @see c4m_web_services_events_services_authentication_info()
 */
function _c4m_web_services_events_security_settings($settings, &$form_state) {
  $form = [];

  $form['authorization_token_name'] = [
    '#type' => 'textfield',
    '#title' => t('Authorization Token Name'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_name'],
  ];

  $form['authorization_token_key'] = [
    '#type' => 'textfield',
    '#title' => t('Authorization Token Key'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_key'],
  ];

  return $form;
}

/**
 * Helper function for flattening an array.
 */
function _c4m_web_services_events_array_flatten($array = NULL) {
  $result = [];

  if (!is_array($array)) {
    $array = func_get_args();
  }

  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $result = array_merge($result, _c4m_web_services_events_array_flatten($value));
    }
    else {
      $result = array_merge($result, [$key => $value]);
    }
  }

  return $result;
}

/**
 * Implements hook_services_resources().
 */
function c4m_web_services_events_services_resources() {
  $node_resource = [
    'eventsite' => [
      'operations' => [
        'c4m_update_event' => [
          'file' => [
            'type' => 'inc',
            'module' => 'c4m_web_services_events',
            'name' => 'resources/c4m_web_services_eventsite_resource',
          ],
          'callback' => '_c4m_web_services_events_eventsite_resource_update',
          'args' => [
            [
              'name' => 'event_id',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'text',
              'description' => 'The event id of the event node to update',
            ],
            [
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to update',
              'type' => 'array',
            ],
          ],
          'access callback' => '_c4m_node_events_resource_access_using_dashboard_id',
          'access arguments' => ['update'], // CHECK
          'access arguments append' => TRUE,
        ],
        'retrieve' => array(
          'file' => array('type' => 'inc', 'module' => 'c4m_web_services_events', 'name' => 'resources/c4m_web_services_eventsite_resource'),
          'callback' => '_c4m_node_resource_retrieve_via_dashboard_id',
          'args' => array(
            array(
              'name' => 'dashboard_event_id',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The dashboard event ID  to get',
            ),
          ),
          'access callback' => '_c4m_node_events_resource_access_using_dashboard_id',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'create' => array(
          'help' => 'Create a node',
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_create',
          'args' => array(
            array(
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to create',
              'type' => 'array',
            ),
          ),
          'access callback' => '_node_resource_access', // TO CHECK
          'access arguments' => array('create'),
          'access arguments append' => TRUE,
        ),
      ],
    ],
  ];

  return $node_resource;
}

/**
 * Implements hook_server_info().
 */
function c4m_web_services_events_server_info() {
  return [
    'name' => 'C4M REST',
    'path' => 'rest',
    'settings' => [
      'file' => ['inc', 'rest_server'],
      'form' => '_rest_server_settings',
      'submit' => '_rest_server_settings_submit',
    ],
  ];
}

/**
 * Starting point of the REST server.
 */
function c4m_web_services_events_server() {
  module_load_include('inc', 'c4m_web_services_events', 'includes/C4MServicesRESTServerFactory');
  module_load_include('inc', 'c4m_web_services_events', 'includes/C4MRESTServer');
  $endpoint_path = services_get_server_info('endpoint_path', 'services/rest');

  $services_rest_server_factory = 'C4MServicesRESTServerFactory';
  $rest_server_factory = new $services_rest_server_factory(['endpoint_path' => $endpoint_path]);
  /* @var $rest_server C4MRESTServer */
  $rest_server = $rest_server_factory->getRESTServer();

  $canonical_path = $rest_server->getCanonicalPath();
  if (empty($canonical_path)) {
    $endpoint_name = services_get_server_info('endpoint', '');
    $endpoint = services_endpoint_load($endpoint_name);
    return t('Services Endpoint "@name" has been setup successfully.', ['@name' => $endpoint->name]);
  }

  try {
    return $rest_server->handle();
  }
  catch (Exception $e) {
    $rest_server->handleException($e);
  }
}

/**
 * Check if the event(site) exists or not.
 * Look for the taxonomy terms and update the arguments array for organisations.
 *
 * @param array $controller
 *   Controller definition.
 * @param array $args
 *   Array of arguments.
 * @param array $options
 *   Options.
 *
 * @see services_controller_execute()
 * @see services.runtime.inc
 */
function c4m_web_services_events_services_request_preprocess_alter(array $controller, array &$args, array $options) {
  // Check by dashboard_id when Creating the new Event if already exists.
  if (isset($options['resource']) && $options['resource'] == "eventsite") {
    if (isset($controller["callback"]) && $controller["callback"] === '_node_resource_create') {
      foreach ($args as &$arg) {
        if (is_array($arg) && isset($arg['c4m_event_dashboard_id']) && isset($arg['c4m_event_dashboard_id'][LANGUAGE_NONE][0]['value'])) {
          $node = c4m_web_services_events_get_existing_node($arg['c4m_event_dashboard_id'][LANGUAGE_NONE][0]['value']);
          if (empty($node)) {

            // A new event site.
            // check OG status , is used for the workflow process , if not set force to draft, pending is not required.
            // it will probably be overridden by the c4m_field_og module, because that one checks if the node exists or not.
            if (!isset($arg['c4m_og_status'])) {
              $arg['c4m_og_status'] = array(LANGUAGE_NONE => array(array('value' => 'draft')));
            }

            // Set Original owner // @todo: get it from the webservice:
            $webservice_eventsite = variable_get('webservice_eventsite', '');
            if ($webservice_eventsite !== '' && $webservice_eventsite['webservice_eventsite_owner_account'] != '') {
              $arg['name'] = $webservice_eventsite['webservice_eventsite_owner_account'];
            }

            // Clone the publish date:
            $arg["original_c4m_publish_date"] = $arg["c4m_publish_date"][LANGUAGE_NONE][0]["value"];
            continue;
          }
          $xml = new SimpleXMLElement('<eventsite_node_exists/>');
          $xml->addChild('event_name', $node->title);
          $xml->addChild('nid', $node->nid);
          $xml->addChild('c4m_event_dashboard_id', $arg['c4m_event_dashboard_id'][LANGUAGE_NONE][0]['value']);
          $xml->addChild('uri', url($node->purl, ['absolute' => TRUE]));
          throw new ServicesException($xml->asXML(), 302);
        }
        else {
          _raise_error("missing_event_dashboard_id");
        }
      }
      // Hard code event for now @ToDo.
      // $arg['event_type']['und'][0]['item'] = 'event';

    }

      // $arg['c4m_body']['und'][0]['value'] = "Gonna need to encode the tags.";
      // // overwriting the event_type
      // //Need to convert the SMED event type id to the correct taxonomy id.
      // $arg['event_type']['und'][0]['item'] = 'event';

      // Get all Taxonomy Fields of Eventsite Content Type.
    $eventsites_taxonomy_fields = field_read_fields([
      'entity_type' => 'node',
      'bundle' => 'event_site',
      'type' => 'taxonomy_term_reference',
    ]);

    if (empty($eventsites_taxonomy_fields)) {
      // taxonomy is required, should give a proper error probably.
      $message = t('Missing taxonomies for CT @content_type.', [
        '@content_type' => 'event_site',
      ]);
      throw new ServicesException($message, 404);
    }
    foreach ($args as &$arg) {
      if (is_array($arg)) {
        // Override the Taxonomy Term Names with Term ids.
        foreach ($arg as $field_name => &$item) {
          if (is_array($item) && isset($eventsites_taxonomy_fields[$field_name]) && isset($item[LANGUAGE_NONE])) {
            $new_terms = [];
            foreach ($item[LANGUAGE_NONE] as $term_key) {
              if (!empty($term_key)) {
                // If term cannot be found, throw error and stop the process.
                // exception for the new vocabulary //@todo update the other vocabularies.
                if ($field_name == 'c4m_vocab_event_type') {
                  $taxonomy_fieldname = 'c4m_external_event_type_id';
                }
                else {
                  $taxonomy_fieldname = 'c4m_dashboard_key';
                }
                if (isset($eventsites_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary']) &&
                    $loaded = c4m_web_services_taxonomy_get_term_by_key($term_key,
                                                                        $eventsites_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary'],
                                                                        $taxonomy_fieldname)) {
                  foreach ($loaded as $tid => $term) {
                    // Check if the term has parents and add them aswell.
                    // taxonomy_get_parents_all will always return at least the
                    // current taxonomy term.
                    if (!empty($term_and_or_parents = taxonomy_get_parents_all($tid))) {
                      foreach ($term_and_or_parents as $term_and_or_parent) {
                        // Only add the new tid if not existing already.
                        if (!empty($term_and_or_parent->tid) && !in_array($term_and_or_parent->tid, $new_terms)) {
                          $new_terms[] = $term_and_or_parent->tid;
                        }
                      }
                    }
                  }
                }
                else {
                  // Term with name not found, throw error.
                  // Indicate the field they tried to populate with the term
                  // that was not found.
                  $message = t('Error when searching for taxonomy term with key: @term_key. Term was intended for field @field_name.', [
                    '@field_name' => $field_name,
                      '@term_key' => $term_key,
                    ]);
                    throw new ServicesException($message, 404);
                }
              }
            }
            if (empty($new_terms)) {
              continue;
            }
            $item[LANGUAGE_NONE] = $new_terms;
          }


          if ($field_name == "c4m_location_address") {
            // Remap the venue to the correct fieldname, naming used within Drupal.
            if (!empty($item[LANGUAGE_NONE][0]['venue'])) {
              $item[LANGUAGE_NONE][0]['name_line'] = $item[LANGUAGE_NONE][0]['venue'];
              unset($item[LANGUAGE_NONE][0]['venue']);
            }
          }
        }
        // day/month/year - slashes not -
        // create correct datetimeformat. be warned minutes are in 15 minutes intervals.
        $start_datetime = DateTime::createFromFormat('Y-m-d H:i', $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value"]);
        if ($start_datetime == FALSE) {
          _raise_error('missing_start_date');
        }
        $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value"] = array();
        $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value"]['date'] = $start_datetime->format('d/m/Y');
        $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value"]['time'] = $start_datetime->format('H:i');

        $end_datetime = DateTime::createFromFormat('Y-m-d H:i', $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value2"]);
        if ($end_datetime == FALSE) {
          _raise_error('missing_end_date');
        }
        $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value2"] = array();
        $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value2"]['date'] = $end_datetime->format('d/m/Y');
        $arg["c4m_datetime_end"][LANGUAGE_NONE][0]["value2"]['time'] = $end_datetime->format('H:i');


        // get publication date:
        $publish_datetime = DateTime::createFromFormat('Y-m-d H:i', $arg["c4m_publish_date"][LANGUAGE_NONE][0]["value"]);
        if ($publish_datetime == FALSE) {
          _raise_error('missing_publication_date');
        }
        $arg["c4m_publish_date"][LANGUAGE_NONE][0]["value"] = array();
        $arg["c4m_publish_date"][LANGUAGE_NONE][0]["value"]['date'] = $publish_datetime->format('d/m/Y');
        $arg["c4m_publish_date"][LANGUAGE_NONE][0]["value"]['time'] = $publish_datetime->format('H:i');

        // Add the purl based on the title - group path is required.
        $arg['purl'] = array("value" => _c4m_web_services_generate_purl_alias($arg['title']));
        // convert the registration Link.
        if (!isset($arg['c4m_link']) && isset($arg['link'])) {
          $arg['c4m_link'] = array (LANGUAGE_NONE => array( array ('url' => $arg['link'], 'title' => $arg['link'])));
          unset($arg['link']);
        }
      }
    }
  }
}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function c4m_web_services_events_services_request_postprocess_alter($controller, $args, &$result) {
  $endpoint_path = services_get_server_info('endpoint_path', '');
  if ($endpoint_path !== WS_EVENTSITE_ENDPOINT) {
    return;
  }
  $context = new ServicesContext($endpoint_path);
  $context->buildFromGlobals();
  /* Going to clean up some of parameters, SMED does not need all info back.*/
  if ($context->getRequestMethod() === "GET") {
    $properties = array('log', 'sticky', 'ds_switch', 'comment', 'promote', 'tnid', 'translate');
    foreach ($properties as $property) {
      unset($result->{$property});
    }
  }


  foreach ($args as $arg) {
    if (!is_array($arg)) {
      continue;
    }
    if (empty($nid = $result['nid'])) {
      continue;
    }
    // When creating a new event_site node, approve it so it becomes status draft,
    // force the publish date and create the default paragraphs.
    if (!empty($controller['callback']) && $controller['callback'] === '_node_resource_create') {
      $node = node_load($nid);
      if (empty($node)) {
        return;
      }

      // When adding through the WS, organisation should be Approved, meaning it gets the status draft.
      $node->c4m_og_status[LANGUAGE_NONE][0]['value'] = 'draft';

      // Also use the original format of the publication date.
      if (isset($arg['original_c4m_publish_date'])) {
      $node->c4m_publish_date[LANGUAGE_NONE][0]['value'] = $arg['original_c4m_publish_date'];
      }


      // Set the default paragraphs.
      c4m_web_services_events_eventsite_set_paragraphs($node);

      // Save the node.
      node_save($node);
    }

    // Remove old members of a group - in case of updating the event site.
    $old_member_ids = c4m_og_get_group_member_ids($nid);
    foreach ($old_member_ids as $current_member) {
      // Todo only remove members that are not in the list anymore.
      og_ungroup('node', $nid, 'user', $current_member);
    }
    // Add Event organisers as an administrator to the event site.
    $event_site_admin_groups = ['c4m_managers', 'c4m_organisers'];
    foreach ($event_site_admin_groups as $admin_group) {
      if (isset($arg[$admin_group])) {
        foreach ($arg[$admin_group][LANGUAGE_NONE] as $manager) {
          // Load the user via email or username (ecas ID), otherwise skip it.
          if (isset($manager['email'])) {
            $loaded_manager = user_load_by_mail($manager['email']);
          }
          elseif (isset($manager['ecas_id'])) {
            $loaded_manager = user_load_by_name($manager['ecas_id']);
          }
          else {
            // Invalid user, skipping...
            continue;
          }
          if ($loaded_manager !== FALSE) {
            // Add the manager as a user to the group for this eventsite.
            $membership = og_group('node', $nid, ['entity' => $loaded_manager]);
            // Add administrator role.
            $role = c4m_og_user_role_load_by_name('administrator member', 'event_site');
            og_role_grant('node', $nid, $loaded_manager->uid, $role->rid);
          }
        }
      }

    }
  }
}

/**
 * Alter the newly created node, publish it and set default paragraphs.
 *
 * @param array $node
 *   The event_site node.
 */
function c4m_web_services_events_eventsite_set_paragraphs(&$node) {
  if ($node->type !== "event_site") {
    return;
  }

  // #Todo : reate the paragraphs  - check original webservices.
  // Set paragraphs for left column.
  $node_field = 'c4m_left_column';
  $paragraph_bundle = 'c4m_paragraph_system_block';

  // // About us block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_event_site:c4m_block_event_site_about_us';
  $paragraph->c4m_heading[LANGUAGE_NONE][0]['value'] = t('About us');
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Event site documents
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_event_site:c4m_block_event_site_documents';
  $paragraph->c4m_heading[LANGUAGE_NONE][0]['value'] = t('Documents');
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Latest news block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'views:c4m_project_news-block';
  $paragraph->c4m_heading[LANGUAGE_NONE][0]['value'] = t('Latest activity');
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Set paragraphs for right column.
  $node_field = 'c4m_right_column';
  // About us block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_event_site:c4m_block_event_site_about';
  $paragraph->c4m_heading[LANGUAGE_NONE][0]['value'] = t('About this event site');
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);
}

/**
 * Allows alteration of the services_resources array after processing.
 *
 * @param array $resources
 *   The combined array of resource definitions from hook_services_resources.
 * @param array $endpoint
 *   An array describing the endpoint that resources are being built for.
 *
 * @deprecated
 * @see _services_build_resources()
 * @see services.resource_build.inc
 */
function c4m_web_services_events_services_resources_post_processing_alter(&$resources, &$endpoint) {
  $endpoint_path = services_get_server_info('endpoint_path', '');
  if ($endpoint_path !== WS_EVENTSITE_ENDPOINT) {
    return;
  }
}


/**
 * Allows alteration of the parsed request data before calling the controller.
 *
 * @param array $data
 *   The parsed request data.
 * @param array $controller
 *   The current controller definition.
 *
 * @see RESTServer->getControllerArguments()
 */
// function c4m_web_services_events_rest_server_request_parsed_alter(&$data, $controller) {
//   //get the correct topic taxonomy here ?
// }

/**
 * Helper function for adding emails as keys for every user.
 */
function c4m_web_services_events_process_users_array($rest_users) {
  if (!$rest_users) {
    return;
  }
  $nre = [];
  foreach ($rest_users as $rest_user) {
    $nre[$rest_user['email']] = $rest_user;
  }
  unset($rest_users);
  return $nre;
}


/**
 * Try to map a dashboard id to an existing node.
 *
 * @param int $organisation_dashboard_id
 *   Dashboard id of the node.
 *
 * @return bool|object
 *   A node object. FALSE if no node found.
 */
function c4m_web_services_events_get_existing_node($event_dashboard_id) {
  $node = FALSE;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event_site')
    ->fieldCondition('c4m_event_dashboard_id', 'value', $event_dashboard_id, '=')
    ->range(0, 1)
    ->addMetaData('account', user_load_by_name('dashboard_user'));

  $result = $query->execute();
  if (isset($result['node'])) {
    $node = array_shift($result['node']);
    $node = node_load($node->nid);
  }
  return $node;
}


/**
 * Implements hook_form_alter().
 *
 * Make some fields readonly, when event site was created via the webservice.
 * Make the dashboard ID readonly for non adminstrators.
 */
function c4m_web_services_events_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'event_site_node_form') {
    // Load the currently logged in user.
    global $user;
    // get settings.
    $webservice_eventsite = variable_get('webservice_eventsite', array());
    // TODO when settings not set, generate a warning
    if (!empty($webservice_eventsite) && $user->name == $webservice_eventsite['webservice_user']) {
      // Coming from werbservice, do not interfere.
      return;
    }
    $field_dasboard_id = "c4m_event_dashboard_id";
    // If an external event(site), make some fields readonly
    if (!empty($form[$field_dasboard_id][LANGUAGE_NONE][0]['value']['#default_value'])) {

      if ($form['#node_edit_form']) {
        $form['external_source'] = array(
        '#type' => 'fieldset',
        '#title' => t('The event was created via SME Dashboard, to modify the locked fields please go to:'),
        '#weight' => 0,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        );
        $sme_dashboard_url = $webservice_eventsite['webservice_event_url'] . '/form/' . $form[$field_dasboard_id][LANGUAGE_NONE][0]['value']['#default_value'] . '/manage-event';
        $form['external_source']['external_event_management_tool'] = array(
          '#markup' => '<div id="smed_dasboard_url"><a href="' . $sme_dashboard_url . '" target="_blank">SME Dashboard Event Manager</a></div>',
        );
      }
      // And administrator has the power to change the dashboard id of the event.
      if (!in_array('administrator', $user->roles)) {
        $form[$field_dasboard_id][LANGUAGE_NONE]['#disabled'] = TRUE;
        $form_state['values'][$field][LANGUAGE_NONE][0]['value'] = $form[$field][LANGUAGE_NONE][0]['value']['#default_value'];
      }
      // Created via webservice allow to see the fields coming from the webservice, but no touchy here.
      $read_only_default_fields = array("title");
      foreach ($read_only_default_fields as $field) {
        $form[$field]['#attributes'] = array('readonly' => 'readonly');
      }
      $read_only_fields = array('c4m_body', 'c4m_project_tag_line', 'c4m_location_address', 'c4m_link', 'c4m_facebook', 'c4m_twitter', 'c4m_vocab_event_type', 'c4m_datetime_end'); // 'c4m_organised_by'
      foreach ($read_only_fields as $field) {
        // Test : $form[$field][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
        if (!isset($form[$field])) {
          continue;
        }
        $form[$field][LANGUAGE_NONE]['#disabled'] = TRUE;
        // Special mod for datefield, when readonly switch the widget, otherwise it will generate an validation error on submit.
        if ($field == 'c4m_datetime_end') {
          $form_state['field'][$field][LANGUAGE_NONE]['instance']['widget']['type'] = 'date_text';
        }
        if (isset($form_state['values'][$field])) {
          $form_state['values'][$field][LANGUAGE_NONE][0]['value'] = $form[$field][LANGUAGE_NONE][0]['value']['#default_value'];
        }
      }
    }
    else {
      // Empty dashboard ID
      if (!in_array('administrator', $user->roles)) {
        // Event site created within drupal, no reason to show it for non admins.
        $form[$field_dasboard_id]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Helper function to check the minimal field data is sent for one event_type.
 *
 * @param string $error_key contains the error key message.
 * @param  string $data Contains some extra info if needed.
 **/

function _raise_error($error_key, $data = '') {
  $error_messages = array(
    'missing_start_date' => 'Missing the start date of the event site',
    'missing_end_date' => 'Missing the end date of the event site',
    'missing_publication_date' => 'Missing the publication date of the event site, this is used to automatically change the status from draft to published.',
    'missing_event_type' => 'The event type is not included for this event site',
    'missing_devent_dashboard_id' => 'The event dashboard ID is missing, not allowed to create an event_site without it.',
    'illegal_event_type' => 'The event type: ' . $data . ' is not known in the options of event_types in the EIC community event sites',
  );
  if (isset($error_messages[$error_key])) {
    // throw new ServicesException($error_messages[$error_key], 500);
    $xml = new SimpleXMLElement('<' . $error_key . '/>');
    $xml->addChild('error_message', $error_messages[$error_key]);
    throw new ServicesException($xml->asXML(), 500);
  }
  else {
    $message = t('error for CT @content_type. todo proper error message for @error_key', [
      '@content_type' => 'event_site',
      '@error_key' => $error_key,
    ]);
    throw new ServicesException($message, 500);
  }
}

