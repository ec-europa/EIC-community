<?php

/**
 * @file
 * Code for the Event Site content type feature.
 */

include_once 'c4m_content_event_site.features.inc';

/**
 * @file
 * Code for the Event Site content type feature.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_content_event_site_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_c4m_og_vocab_info_groups().
 */
function c4m_content_event_site_c4m_og_vocab_info_groups() {
  return array(
    'event_site' => array(
      'c4m_vocab_category',
      'c4m_vocab_tag',
    ),
  );
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_event_site_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_event_sites' => array(
        'type' => 'event_site',
        'entity_type' => 'node',
        'bundles' => array('event_site'),
        'singular' => 'Event Site',
        'plural' => 'Event Sites',
        'state' => 1,
        'skip_access_check' => TRUE,
        'c4m_status' => array('published', 'archived'),
        'aggregate' => array(),
        'weight' => -3,
        'attributes' => array(
          'class' => array('projects'),
        ),
        'link' => array(
          'path' => 'events',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_event_sites' => array(
        'type' => 'event_site',
        'entity_type' => 'node',
        'bundles' => array('event_site'),
        'singular' => 'Event Site',
        'plural' => 'Event Sites',
        'state' => 1,
        'aggregate' => array(),
        'weight' => 1,
        'attributes' => array(
          'class' => array('topic-projects'),
        ),
        'link' => array(
          'path' => 'events',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function c4m_content_event_site_block_info() {
  $blocks = array();

  $blocks['header_name_banner_event_site'] = array(
    'info' => t('Event Site header'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['c4m_block_event_site_about'] = array(
    'info' => t('Event Site: About'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['c4m_block_event_site_documents'] = array(
    'info' => t('Event Site: Documents'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['c4m_block_create_event_site'] = array(
    'info' => t('Event site: Create event site'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_event_site_block_view($delta) {
  $module = 'c4m_content_event_site';

  module_load_include('inc', $module, $module . '.block');
  $callback = "_{$module}_block_" . $delta;
  if (function_exists($callback)) {
    return $callback();
  }

  return array();
}

/**
 * Implements hook_FORM_ID_form_alter().
 *
 * Alter the Event Site creation form.
 */
function c4m_content_event_site_form_event_site_node_form_alter(array &$form, array &$form_state) {
  $type = 'event_site';
  global $user;

  _c4m_og_alter_group_form($form, $form_state, $type);

  // There's no node ID at form => form is for new project creation.
  // Hide status field, for it to get default value of Pending, once created.
  if (is_null($form['nid']['#value'])) {
    $form['c4m_og_status']['#access'] = FALSE;
  }

  // Show/Hide Publish date field based on value of Status field.
  $form['c4m_publish_date']['#access'] = FALSE;
  if ($form['c4m_og_status']['#access'] == TRUE) {
    $form['c4m_publish_date']['#access'] = TRUE;
    $form['c4m_publish_date']['#states'] = array(
      'visible' => array(
        'select[name="c4m_og_status[und]"]' => array('value' => 'draft'),
      ),
    );
  }
  if ($form['c4m_location_address'] &&
    $form["c4m_location_address"][LANGUAGE_NONE][0]['name_block'] &&
    $form["c4m_location_address"][LANGUAGE_NONE][0]['street_block']
  ) {
    $form["c4m_location_address"][LANGUAGE_NONE][0]['name_block']['name_line']['#title'] = t('Name of the Venue');
    $form["c4m_location_address"][LANGUAGE_NONE][0]['street_block']['thoroughfare']['#title'] = t('Address of the venue');
    $form["c4m_location_address"][LANGUAGE_NONE][0]['street_block']['premise']['#access'] = FALSE;
  }

  // Remove options that are only needed for Group Events in the event_type field.
  if (!empty($form['c4m_vocab_event_type'][LANGUAGE_NONE]['#options'])) {
    if ($user->uid !== "1") {
      foreach ($form['c4m_vocab_event_type'][LANGUAGE_NONE]['#options'] as $key => $option) {
        $disallowed_options = [
          C4M_CONTENT_EVENT_TYPE_EVENT_TID,
          C4M_CONTENT_EVENT_TYPE_LEARNING_TID,
          C4M_CONTENT_EVENT_TYPE_MEETING_TID,
          C4M_CONTENT_EVENT_TYPE_PITCHING_TID,
        ];
        if (in_array($key, $disallowed_options)) {
          unset($form['c4m_vocab_event_type'][LANGUAGE_NONE]['#options'][$key]);
        }
        if (isset($form["#node"]->nid)) { // maybe use is_new ?
          $node = node_load($form["#node"]->nid);  // Maybe switch to a wrapper?
          if (!empty($node->c4m_event_dashboard_id[LANGUAGE_NONE][0]['value'])) {
            // Coming from a webservice, so removing the other options, except the one selected.
            if ($key !== (int) $node->c4m_vocab_event_type[LANGUAGE_NONE][0]["tid"]) {
              unset($form['c4m_vocab_event_type'][LANGUAGE_NONE]['#options'][$key]);
            }
            continue;
            //$filter_clean_event_types = FALSE;
          }
        }
        // The webservice user gets a free pass.
        if (module_exists('c4m_web_services_events')) {
          $webservice_eventsite = variable_get('webservice_eventsite', array());
          if (isset($webservice_eventsite['webservice_user']) && $webservice_eventsite['webservice_user']== $user->name){
            continue;
          }
        }
        $disallowed_options2 = [
          C4M_CONTENT_EVENT_TYPE_E_PITCHING_TID,
          'eic_interviews',
          C4M_CONTENT_EVENT_TYPE_INNOV_PROCUR_DAY_TID,
          C4M_CONTENT_EVENT_TYPE_INVESTOR_DAY_TID,
        ];
        if (in_array($key, $disallowed_options2)) {
           unset($form['c4m_vocab_event_type'][LANGUAGE_NONE]['#options'][$key]);
        }
      }
    }
  }

}

/**
 * Returns the administered event sites count for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_content_event_site_get_administered_event_sites_count($uid) {
  // We are counting the memberships as there are no roles in Event Sites.
  return c4m_content_event_site_get_user_event_site_memberships_count($uid, OG_STATE_ACTIVE);
}


/**
 * Returns the pending event sites count for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_content_event_site_get_pending_event_sites_count($uid) {
  return c4m_content_event_site_get_user_event_site_memberships_count($uid, OG_STATE_PENDING);
}


/**
 * Returns the memberships in event_site count for an user.
 *
 * @param int $uid
 *   User id.
 * @param int $state
 *   OG state.
 *
 * @return int
 *   Count.
 */
function c4m_content_event_site_get_user_event_site_memberships_count($uid, $state = OG_STATE_ACTIVE) {
  $query = db_select('og_membership', 'm');
  $query->fields('m', array('id'));
  $query->join('node', 'n', 'n.nid = m.gid');
  $query->condition('m.group_type', 'node');
  $query->condition('m.entity_type', 'user');
  $query->condition('m.etid', $uid);
  $query->condition('m.state', $state);
  $query->condition('n.type', 'event_site');


  $query = $query->execute();
  $amount = $query->rowCount();

  return $amount;
}

/**
 * Returns the owned projects count for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_content_event_site_owned_event_sites_count($uid) {
  return c4m_content_event_site_get_owned_event_sites_count($uid);
}

/**
 * Returns the count of owned event sites for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_content_event_site_get_owned_event_sites_count($uid) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('n.uid', $uid);
  $query->condition('n.status', NODE_PUBLISHED);
  $query->condition('n.type', 'event_site');



  $query = $query->execute();
  $amount = $query->rowCount();

  return $amount;
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_event_site_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_user_event_sites_administered' => array(
      'type' => 'event_sites_administered',
      'context' => 'user',
      'callback' => 'c4m_content_event_site_get_administered_event_sites_count',
    ),
    'c4m_user_event_sites_pending' => array(
      'type' => 'event_sites_pending',
      'context' => 'user',
      'callback' => 'c4m_content_event_site_get_pending_event_sites_count',
    ),
    'c4m_user_event_sites_owned' => array(
      'type' => 'event_sites',
      'context'  => 'user',
      'callback'  => 'c4m_content_event_site_owned_event_sites_count',
    ),
  );
}

/**
 * Implements hook_pc_system_component_blockreference_whitelist().
 */
function c4m_content_event_site_c4m_content_project_blockreference_whitelist($context) {
  if ($context['entity']->hostEntity()->type == 'event_site') {
    return array(
      'c4m_content_event_site:c4m_block_event_site_about' => array(
        'label' => t('About this event site'),
      ),
      'c4m_content_event_site:c4m_block_event_site_documents' => array(
        'label' => t('Event site documents'),
      ),
      'c4m_content_project:c4m_block_project_groups' => array(
        'label' => t('Related groups'),
      ),
      'views:c4m_project_news-block' => array(
        'label' => t('Latest news'),
      ),
      'views:c4m_project_highlights-block' => array(
        'label' => t('Highlights block'),
      ),
      'c4m_search_og:c4m_search_group_form' => array(
        'label' => t('Search block'),
      ),
    );
  }

  return array();
}

/**
 * Implements hook_theme().
 */
function c4m_content_event_site_theme() {
  $theme['c4m_content_event_site_header_title'] = array(
    'variables' => array(
      'title' => '',
      'tagline' => '',
      'stage' => '',
      'type' => '',
      'status' => '',
      'flag' => '',
      'publish_link' => '',
    ),
    'path' => drupal_get_path('module', 'c4m_content_event_site') . '/theme',
    'template' => 'c4m-content-event-site-header-title',
  );

  return $theme;
}

/**
 * Implements hook_TYPE_alter().
 *
 * Using hook_c4m_offcanvas_trigger_label_left_alter().
 */
function c4m_content_event_site_c4m_offcanvas_trigger_label_left_alter(
  &$trigger_label
) {
  if (arg(0) == 'event_sites' && empty(arg(1))) {
    $trigger_label['label'] = t('Filter results');
    $trigger_label['icon'] = 'filter';
  }
}

/**
 * Implements hook_c4m_cta_block().
 */
function c4m_content_event_site_c4m_cta_block() {
  global $user;

  // Only add items if there is an OG group.
  if (!$group = c4m_og_current_group()) {
    return;
  }

  // Prevent from 'group' nodes to run this logic.
  if ($group->type != 'event_site' ) {
    return;
  }

  // A blocked (banned) user should not be able to see the CTA block.
  $user_role = c4m_user_og_get_role_in_group($user, $group);
  if ($user_role == 'blocked') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $group);
  // Do not present CTA block for archived group.
  if ($wrapper->c4m_og_status->value() == 'archived') {
    return;
  }

  $items = array();

  if (!drupal_is_front_page() || user_is_anonymous()) {
    return $items;
  }

  if ($item = c4m_user_og_follow_group_cta($group)) {
    $items['follow'] = $item;
  }

  // Add the print functionality.
  $items['print_event_site'] = [
    '#theme' => 'c4m_helper_entity_actions_print',
    '#weight' => 100,
  ];

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Implemented for _og_invite_answer_form form.
 */
function c4m_content_event_site_form__og_invite_answer_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_c4m_content_event_site_form__og_invite_answer_form_submit';
}

/**
 * Submit handler for _og_invite_answer_form form.
 *
 * Adds administrator role for users accepting an invitation to a project.
 */
function _c4m_content_event_site_form__og_invite_answer_form_submit($form, &$form_state) {
  global $user;
  $answer = $form_state['values']['answer'];
  if ($answer !== 'approve') {
    return;
  }
  $group_type = $form_state['values']['group_type'];
  $gid = $form_state['values']['gid'];
  $group = entity_load_single($group_type, $gid);
  list(,, $bundle) = entity_extract_ids($group_type, $group);
  if ($bundle !== 'event_site') {
    return;
  }

  $role = c4m_og_user_role_load_by_name('administrator member', $bundle);
  og_role_grant($group_type, $gid, $user->uid, $role->rid);
}

/**
 * Implements hook_menu_link_insert().
 */
function c4m_content_event_site_menu_link_insert($link) {
  if (empty($link['menu_name']) || $link['link_path'] != 'wiki') {
    return;
  }

  $nid = !empty(explode('-',$link['menu_name'])[2]) ? explode('-',$link['menu_name'])[2] : '';
  if (empty($nid)) {
    return;
  }

  $node = node_load($nid);
  if (empty($node)) {
    return;
  }

  $node_type = $node->type;

  if ($node_type != 'event_site') {
    return;
  }

  // Disable by default the Wiki link for Event Sites.
  $link['hidden'] = 1;
  menu_link_save($link);
}

/**
 * Implements hook_cron().
 */
function c4m_content_event_site_cron() {
  module_load_include('inc', 'c4m_content_event_site', 'c4m_content_event_site.cron');
  _c4m_content_event_site_cron();
}

/**
 * Implements hook_clone_node_alter().
 */
function c4m_content_event_site_clone_node_alter(&$node, $context) {
  $node->changed = null;
//  unset($node->book);
  $orig_nid = $context['original_node']->nid;
  if ($clone_counter = c4m_content_event_site_update_clone_table($orig_nid)) {
    $node->title .= ' - ' . $clone_counter;
  }
  unset($node->last_comment_timestamp);
  unset($node->last_comment_uid);
  unset($node->purl);
  node_object_prepare($node);
  node_save($node);

  // Get group content.
  $og_contents = db_select('og_membership', 'ogm')
    ->fields('ogm', array('etid'))
    ->condition('ogm.gid', $orig_nid, '=')
    ->condition('ogm.entity_type', 'node', '=')
    ->execute()
    ->fetchAll();

  // Duplicate group content into the cloned group.
  if (!empty($og_contents)) {
    foreach ($og_contents as $one) {
      if (!empty($one->etid)) {
        $new_node = node_load($one->etid);
        $new_node->is_new = true;
        unset($new_node->nid);
        unset($new_node->vid);
        unset($new_node->tnid);
        $new_node->og_group_ref['und'][0]['target_id'] = $node->nid;
        node_save($new_node);
      }
    }
  }

  // Get all members from old group.
  $members = c4m_og_get_users_from_group($context['original_node']->nid);

  // Load user entities for retrieved members.
  $users = user_load_multiple(array_keys($members));
  // Assign the users to the cloned group.
  foreach ($members as $uid => $rid) {
    og_group('node', $node->nid, ['entity' => $users[$uid]]);
    if (!empty($rid)) {
      og_role_grant('node', $node->nid, $uid, $rid);
    }
  }

  return;
}

/**
 * Update custom table for event sites clone functionality.
 *
 * @param int $nid
 *   Id of the event site that is being cloned.
 *
 * @return int|bool
 *   Returns the current counter if there are multiple clones for the same node.
 *
 * @throws \Exception
 */
function c4m_content_event_site_update_clone_table($nid) {
  $index = db_select('c4m_clone_event_sites', 'ces')
    ->fields('ces', array('clone_counter'))
    ->condition('nid', $nid, '=')
    ->execute()->fetchField();
  if (!empty($index) || ($index === "0")) {
    $index++;
    db_update('c4m_clone_event_sites')
      ->fields(array(
        'clone_counter' => $index,
      ))
      ->condition('nid', $nid)
      ->execute();
  }
  else {
    try {
      db_insert('c4m_clone_event_sites')
        ->fields(array(
          'nid' => $nid,
          'clone_counter' => 0,
        ))
        ->execute();
    }
    catch (PDOException $e) {
      watchdog('c4m_clone_event_sites', $e->getMessage(), NULL, WATCHDOG_ERROR);
      return FALSE;
    }
  }
  return $index;
}

/**
 * Implements hook_menu().
 */
function c4m_content_event_site_menu() {
  $items = array();

  $items['c4m/%node/publish_event_site'] = array(
    'title' => 'Publish current event site',
    'page callback' => 'c4m_content_event_site_publish_event_site',
    'page arguments' => [1],
    'access callback' => 'c4m_content_event_site_publish_event_site_access',
    'access arguments' => [1],
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Check access to change the status of the node.
 *
 * @param object $node
 *   The node with to promote value.
 *
 * @return bool
 *   TRUE|FALSE
 */
function c4m_content_event_site_publish_event_site_access($node) {
  if (empty($node)) {
    return FALSE;
  }

  // Verify the type of the node.
  if (!in_array($node->type, ['event_site'])) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Change the status in a node to Published.
 *
 * @param object $node
 *   The node to be changed.
 */
function c4m_content_event_site_publish_event_site($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $wrapper->c4m_og_status = 'published';
  $wrapper->save();

  drupal_set_message(t('Event site @name was published.', ['@name' => $node->title]));
  drupal_goto($node->purl);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Implemented for og_ui_add_users form. Checks and removes the Administrator
 * role checkbox. This is required only for projects.
 */
function c4m_content_event_site_form_og_ui_add_users_alter(&$form, &$form_state, $form_id) {
  $group = entity_load_single($form['group_type']['#value'], $form['gid']['#value']);
  list(,, $bundle) = entity_extract_ids($form['group_type']['#value'], $group);
  if ($bundle !== 'event_site') {
    return;
  }

  $role = c4m_og_user_role_load_by_name('attendee', $bundle);
  $form['og_user']['roles']['#default_value'] = [$role->rid];
}

/**
 * Implements hook_views_pre_render().
 * 
 * Only group administrators can start discussions.
 */
function c4m_content_event_site_views_pre_render(&$view) {
  if ($view->name != "c4m_overview_og_discussions") {
    return;
  }
  $gid = $view->args[0];

  $group = entity_load_single('node', $gid);
  // only process event sites.
  if (!isset($group) || $group->type != "event_site") {
    return;
  }
  global $user;
  $event_site_group_members = c4m_og_get_group_members($gid);
  $key = 'c4m_views_node_add';
  if (isset($view->header) && !in_array($user->uid, $event_site_group_members) && $user->uid != $group->uid) {
    unset($view->header[$key]);
  }
}
